package com.example.crossmemo.ui.memoEditPage

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.crossmemo.data.memo.Memo
import com.example.crossmemo.data.repository.MemoRepository
import dagger.hilt.android.lifecycle.HiltViewModel
import jakarta.inject.Inject
// import dagger.hilt.android.lifecycle.HiltViewModel // Uncomment if using Hilt
import kotlinx.coroutines.launch
// import javax.inject.Inject // Uncomment if using Hilt

@HiltViewModel // Uncomment if using Hilt
class MemoEditViewModel @Inject constructor( // Uncomment if using Hilt
     private val memoRepository: MemoRepository
 ) : ViewModel() {

// For now, without Hilt, you'll need to create a ViewModelProvider.Factory
// to inject the repository, or pass it directly if not using a factory.
// This example assumes you will set up a Factory or use Hilt.
// class MemoEditViewModel(private val memoRepository: MemoRepository) : ViewModel() {

    // If your memo id is auto-generated by Room, you don't need to pass it here.
    // Room's insert (OnConflictStrategy.REPLACE) can also handle updates if the id exists.
    // Let's assume you pass 0 for a new memo if id is autogenerated.
    fun saveMemo(title: String, contentHtml: String, existingMemoId: Long = 0L) {
        viewModelScope.launch {
            val memo = Memo(
                id = if (existingMemoId == 0L) 0 else existingMemoId, // Pass 0 for Room to auto-generate for new memos
                title = title,
                content = contentHtml
                // Add other fields like creationDate, lastModifiedDate if you have them
            )
            if (existingMemoId == 0L) {
                memoRepository.insertMemo(memo)
            } else {
                // If you want to differentiate insert vs update logic more explicitly
                // or if your insertMemo doesn't handle conflicts by replacing.
                // Assuming your Memo entity's id is the primary key and autogenerated.
                // If you call insertMemo with an existing ID and OnConflictStrategy.REPLACE,
                // it will update. Otherwise, you'd call an updateMemo method.
                // Your current DAO has insertMemo and updateMemo separately.
                memoRepository.updateMemo(memo)
            }
        }
    }
}

